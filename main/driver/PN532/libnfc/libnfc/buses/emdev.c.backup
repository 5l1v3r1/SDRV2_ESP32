#include "stm32f10x.h"
#include "emdev.h"
#include "string.h"
#include "tim.h"

static uart_pcb_t pcb;

void uartInit(void)
{
	memset(&pcb, 0, sizeof(uart_pcb_t));
	pcb.pending_tx_data = 0;
	pcb.rxfifo.len = 0;
}

int uartSend(uint8_t *buffer, uint32_t length, int timeout)
{
	uint8_t *tmp = buffer;
	while(length != 0)
	{
		USART_SendData(USART1, *tmp);
//    USART_SendData(USART3, *tmp);
		tmp++;
		length--;
		/* Loop until the end of transmission */
		while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
		{}
//    while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET)
//		{}
	}
	return 0;
}

void uartSendByte(uint8_t ch)
{
  USART_SendData(USART1, (uint8_t) ch);
  /* Loop until the end of transmission */
  while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
  {}
		
	return;
}

uint8_t uartRxBufferRead(void)
{
	uint8_t data;
	data = pcb.rxfifo.buf[pcb.rxfifo.rd_ptr];
	pcb.rxfifo.rd_ptr = (pcb.rxfifo.rd_ptr + 1) % CFG_UART_BUFSIZE;
	pcb.rxfifo.len--;  
  
//  USART_SendData(USART3, data);
  /* Loop until the end of transmission */
//  while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET)
//  {}
	
	return data;
}

int uartRxBufferReadArray(uint8_t *rx, uint32_t len, int timeout)
{
  uint32_t ticks = TimerDrvGetTicks();
  uint8_t *ptr = rx;
  while(len)
  {
    if(pcb.rxfifo.len > 0)
    {
       len--;
      (*ptr++) = uartRxBufferRead();
    }
    if(TimerDrvGetDly(ticks, timeout))
    {
      printf("\r\n receive drv timeout\r\n");
      return -1;
    }
  }
  return 0;
}

void uartRxBufferWrite(uint8_t data)
{
	pcb.rxfifo.buf[pcb.rxfifo.wr_ptr] = data;
	pcb.rxfifo.wr_ptr = (pcb.rxfifo.wr_ptr + 1) % CFG_UART_BUFSIZE;
	pcb.rxfifo.len++;
}

void uartRxBufferClearFIFO()
{
	pcb.rxfifo.rd_ptr = 0;
	pcb.rxfifo.wr_ptr = 0;
	pcb.rxfifo.len = 0;
}

uint8_t uartRxBufferDataPending(void)
{
	if(pcb.rxfifo.len != 0)
	{
		return 1;
	}
	return 0;
}

uart_pcb_t *uartGetPCB(void)
{
    return &pcb;
}



void mopen(void)
{
  uartInit();
}

int mreceive(uint8_t *pbtRx, const size_t szRx, int timeout)
{
  return uartRxBufferReadArray(pbtRx, szRx, timeout);
}
//const 
int msend(const uint8_t *pbtTx, const size_t szTx, int timeout)
{
  return uartSend((uint8_t *)pbtTx, szTx, timeout);
}

void mclose(void)
{
  printf("bye bye\r\n");
}

void emdev_init(nfc_emdev *emdev)
{
  emdev->open = mopen;
  emdev->receive = mreceive;
  emdev->send = msend;
  emdev->close = mclose;
}


